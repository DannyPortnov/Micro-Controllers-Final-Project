C51 COMPILER V9.60.0.0   SPI                                                               05/02/2022 15:42:42 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE SPI
OBJECT MODULE PLACED IN .\lib\efm8ub2\bsp\efm8_memory_lcd\src\spi.OBJ
COMPILER INVOKED BY: C:\SimplicityStudio\developer\toolchains\keil_8051\9.60\BIN\C51.exe C:\SimplicityStudio\developer\s
                    -dks\8051\v4.2.3\Device\EFM8UB2\bsp\efm8_memory_lcd\spi.c OMF2 SMALL DEBUG OBJECTEXTEND ROM(LARGE) WARNINGLEVEL(2) FLOATF
                    -UZZY(3) OPTIMIZE(8,SPEED) INTVECTOR(0X0000) INTPROMOTE INCDIR(C:\Users\danih\OneDrive - ort braude college of engineerin
                    -g\Desktop\מיקרו בקרים\v5_workspace\Middle Project\inc;C:\Users\danih\OneDrive - ort braude college of engineering\Deskto
                    -p\מיקרו בקרים\v5_workspace\Middle Project\inc\config;C:/SimplicityStudio/developer/sdks/8051/v4.2.3//kits/common/drivers
                    -/efm8_memory_lcd/inc;C:/SimplicityStudio/developer/sdks/8051/v4.2.3//kits/common/drivers/efm8_memory_lcd/inc/graphics;C:
                    -/SimplicityStudio/developer/sdks/8051/v4.2.3//kits/common/drivers/efm8_memory_lcd/inc/config;C:/SimplicityStudio/develop
                    -er/sdks/8051/v4.2.3//kits/common/bsp;C:/SimplicityStudio/developer/sdks/8051/v4.2.3//kits/EFM8UB2_SLSTK2001A/config;C:/S
                    -implicityStudio/developer/sdks/8051/v4.2.3//Device/shared/si8051Base;C:/SimplicityStudio/developer/sdks/8051/v4.2.3//Dev
                    -ice/EFM8UB2/inc;C:/SimplicityStudio/developer/sdks/8051/v4.2.3//kits/common/drivers/efm8_joystick;C:/SimplicityStudio/de
                    -veloper/sdks/8051/v4.2.3//kits/common/drivers/efm8_rgb_led;C:/SimplicityStudio/developer/sdks/8051/v4.2.3//Device/EFM8UB
                    -2/peripheral_driver/inc) PRINT(.\lib\efm8ub2\bsp\efm8_memory_lcd\src\spi.lst) COND PAGEWIDTH(120) PAGELENGTH(65) OBJECT(
                    -.\lib\efm8ub2\bsp\efm8_memory_lcd\src\spi.OBJ)

line level    source

   1          /**************************************************************************//**
   2           * Copyright (c) 2015 by Silicon Laboratories Inc. All rights reserved.
   3           *
   4           * http://developer.silabs.com/legal/version/v11/Silicon_Labs_Software_License_Agreement.txt
   5           *****************************************************************************/
   6          /////////////////////////////////////////////////////////////////////////////
   7          // Spi.c
   8          /////////////////////////////////////////////////////////////////////////////
   9          
  10          // SPI FIFO Format
  11          // ---------------
  12          //
  13          // All SPI transfers are pushed to the TX FIFO with the transfer size in
  14          // bytes followed by the data to transmit.
  15          
  16          /////////////////////////////////////////////////////////////////////////////
  17          // Includes
  18          /////////////////////////////////////////////////////////////////////////////
  19          
  20          #include "bsp.h"
  21          #include "spi.h"
  22          #include "spi_0.h"
  23          #include <string.h>
  24          
  25          /////////////////////////////////////////////////////////////////////////////
  26          // Globals
  27          /////////////////////////////////////////////////////////////////////////////
  28          
  29          static SI_SEGMENT_VARIABLE(TxBuffer[SPI_BUF_SIZE], uint8_t, EFM8PDL_SPI0_TX_SEGTYPE);
  30          
  31          static volatile uint8_t TransferState = ST_IDLE;
  32          static volatile uint8_t TransferSize = 0;
  33          
  34          /////////////////////////////////////////////////////////////////////////////
  35          // Functions
  36          /////////////////////////////////////////////////////////////////////////////
  37          
  38          void SPI_StartTransfer(SI_VARIABLE_SEGMENT_POINTER(buffer, uint8_t, SI_SEG_GENERIC), uint8_t size)
  39          {
  40   1        uint8_t sfrPageSave;
  41   1        uint8_t i, test=0;
  42   1        // Wait for previous transfer to complete
  43   1        while (TransferState != ST_IDLE);
  44   1        /*while (TransferState != ST_IDLE){//replacing with testing loop
C51 COMPILER V9.60.0.0   SPI                                                               05/02/2022 15:42:42 PAGE 2   

  45   1            test++;
  46   1            if (test>250)
  47   1              TransferState=ST_IDLE;
  48   1        } //usually test reaches 80, 82*/
  49   1        // Start new transfer
  50   1        TransferState = ST_CS_SETUP;
  51   1        TransferSize = size;
  52   1      
  53   1        for (i = 0; i < size; i++)
  54   1        {
  55   2          TxBuffer[i] = buffer[i];
  56   2        }
  57   1      
  58   1        sfrPageSave = SFRPAGE;
  59   1        SFRPAGE = LEGACY_PAGE;
  60   1      
  61   1        // CS setup time
  62   1        // Timer 2 overflows at end of setup time
  63   1        TMR2 = (uint16_t)-(DELAY_TIMER_FREQ / 1000000 * SPI_CS_SETUP_US);
  64   1        BSP_DISP_CS = SPI_CS_ASSERT_LVL;
  65   1        TMR2CN0 |= TMR2CN0_TR2__BMASK;
  66   1      
  67   1        SFRPAGE = sfrPageSave;
  68   1      }
  69          
  70          /////////////////////////////////////////////////////////////////////////////
  71          // Interrupt Service Handlers
  72          /////////////////////////////////////////////////////////////////////////////
  73          
  74          void SPI0_transferCompleteCb(void)
  75          {
  76   1        uint8_t sfrPageSave;
  77   1      
  78   1        // CS hold time
  79   1        TransferState = ST_CS_HOLD;
  80   1      
  81   1        sfrPageSave = SFRPAGE;
  82   1        SFRPAGE = LEGACY_PAGE;
  83   1      
  84   1        // CS hold time
  85   1        // Timer 2 overflows at end of hold time
  86   1        TMR2 = (uint16_t)-(DELAY_TIMER_FREQ / 1000000 * SPI_CS_HOLD_US);
  87   1        TMR2CN0 |= TMR2CN0_TR2__BMASK;
  88   1      
  89   1        SFRPAGE = sfrPageSave;
  90   1      }
  91          
  92          //-----------------------------------------------------------------------------
  93          // TIMER2_ISR
  94          //-----------------------------------------------------------------------------
  95          //
  96          // TIMER2 ISR Content goes here. Remember to clear flag bits:
  97          // TMR2CN::TF2H (Timer # High Byte Overflow Flag)
  98          // TMR2CN::TF2L (Timer # Low Byte Overflow Flag)
  99          //
 100          //-----------------------------------------------------------------------------
 101          SI_INTERRUPT(TIMER2_ISR, TIMER2_IRQn)
 102          {
 103   1        TMR2CN0 &= ~TMR2CN0_TF2H__BMASK;
 104   1      
 105   1        // Stop timer
 106   1        TMR2CN0 &= ~TMR2CN0_TR2__BMASK;
 107   1      
C51 COMPILER V9.60.0.0   SPI                                                               05/02/2022 15:42:42 PAGE 3   

 108   1        // CS setup complete
 109   1        if (TransferState == ST_CS_SETUP)
 110   1        {
 111   2          TransferState = ST_TX;
 112   2          SPI0_transfer(TxBuffer, NULL, SPI0_TRANSFER_TX, TransferSize);
 113   2        }
 114   1        // CS hold complete
 115   1        else if (TransferState == ST_CS_HOLD)
 116   1        {
 117   2          // Deassert CS
 118   2          BSP_DISP_CS = SPI_CS_DEASSERT_LVL;
 119   2      
 120   2          // Transfer complete
 121   2          TransferState = ST_IDLE;
 122   2        }
 123   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    188    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =     20    ----
   DATA SIZE        =      2       4
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
